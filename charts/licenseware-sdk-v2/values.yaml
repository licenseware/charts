commonLabels:
  licenseware.io/app: "{{ .Values.configMapPairs.APP_SHORT_NAME }}"
  licenseware.io/env: "{{ .Values.configMapPairs.ENVIRONMENT }}"
  licenseware.io/owner: licenseware
  licenseware.io/tier: backend

configMapPairs:
  APP_HOST: ""
  APP_ID: ""
  APP_NAME: ""
  APP_PATH: ""
  APP_SHORT_NAME: ""
  AUTH_SERVICE_URL: ""
  ENVIRONMENT: ""
  FILE_UPLOAD_PATH: /tmp/lware
  IFMP_SERVICE_URL: ""
  LOG_LEVEL: INFO
  LWARE_IDENTITY_USER: ""
  MONGO_DATABASE_NAME: "{{ .Values.configMapPairs.APP_SHORT_NAME }}"
  PORT: "5000"
  QUEUE_NAME: "{{ .Values.configMapPairs.APP_SHORT_NAME }}"
  PROMETHEUS_ENABLED: "false"
  REDIS_DB: "0"
  REDIS_HOST: "{{ if .Values.redis.create }}{{ .Release.Name }}-redis-master{{ end }}"
  REDIS_PORT: "6379"
  REGISTRY_SERVICE_URL: ""
  dramatiq_prom_port: "{{ .Values.serviceMonitorDramatiq.portNumber | int }}"

extraEnv: []

extraEnvFrom: []

extraVolumeMounts: []

extraVolumes: []

fullnameOverride: "{{ .Release.Name }}"

global:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 10
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  containerName: "{{ .Values.configMapPairs.APP_SHORT_NAME }}"
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  replicaCount: 1
  resources:
    limits:
      cpu: "2"
      memory: 4Gi
    requests:
      cpu: 100m
      memory: 128Mi
  securityContext:
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    runAsGroup: 1000
    runAsNonRoot: true
    runAsUser: 1000
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  terminationGracePeriodSeconds: 30
  tolerations: []

image:
  pullPolicy: IfNotPresent
  repository: ghcr.io/licenseware/licenseware-sdk-v2
  tag: latest

imagePullSecrets: []

jupyter:
  config:
    token: ""
  create: false
  extraEnvFrom:
    - configMapRef:
        name: "{{ .Release.Name }}"
    - secretRef:
        name: "{{ .Release.Name }}"
  extraVolumeMounts:
    []
    # - mountPath: /home/licenseware/service
    #   name: app
    # - mountPath: /pip.d
    #   name: app
  extraVolumes:
    []
    # - name: app
    #   persistentVolumeClaim:
    #     claimName: "{{ .Release.Name }}-source-code"
  ingress:
    enabled: false
    hosts:
      - host: jupyter.{{ .Values.configMapPairs.APP_SHORT_NAME }}.localhost
        paths:
          - path: /
            pathType: Prefix

mongo-express:
  create: false
  image:
    tag: 1.0.0-alpha
  ingress:
    enabled: true
    hosts:
      - host: mongo-express.TODO.localhost
        paths:
          - /
    pathType: Prefix
  mongodbAdminPassword: ""
  mongodbAdminUsername: root
  mongodbAuthDatabase: admin
  mongodbEnableAdmin: true
  mongodbServer: ""

mongodb:
  auth:
    rootPassword: ""
  create: false
  persistence:
    enabled: true
  service:
    nodePorts:
      mongodb: 30100
    type: ClusterIP

mongodb-sharded:
  auth:
    replicaSetKey: ""
    rootPassword: ""
  configsvr:
    persistence:
      enabled: false
  create: false
  shards: 1
  shardsvr:
    dataNode:
      replicaCount: 1
    persistence:
      enabled: false

nameOverride: "{{ .Release.Name }}"

persistence:
  sourceCode:
    accessModes:
      - ReadWriteOnce
    annotations: {}
    claimName: ""
    enabled: false
    mountPath: /home/licenseware/service
    nameOverride: ""
    size: 512Mi
    storageClassName: ""
  uploadFiles:
    accessModes:
      - ReadWriteOnce
    annotations: {}
    claimName: ""
    create: false
    enabled: true
    size: 1Gi
    storageClassName: ""

pgadmin:
  create: false
  env:
    email: null
    password: null
  extraSecretMounts:
    []
    # - name: pgpassfile
    #   secret: pgpassfile
    #   subPath: pgpassfile
    #   mountPath: /var/lib/pgadmin/storage/pgadmin/file.pgpass
    #   readOnly: true
  image:
    tag: 6.15
  ingress:
    enabled: false
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
  livenessProbe:
    initialDelaySeconds: 40
  readinessProbe:
    initialDelaySeconds: 40
  serverDefinitions:
    enabled: false
    servers:
      licenseware:
        Group: Servers
        Host: postgresql
        MaintenanceDB: postgres
        Name: Licenseware
        Port: 5432
        Username: licenseware
      # PassFile: /var/lib/pgadmin/storage/pgadmin/file.pgpass
  service:
    type: ClusterIP

postgresql:
  auth:
    database: admin
    password: null
    username: auth_service
  create: false
  primary:
    initdb:
      scripts:
        init_example.sh: |
          echo it works

redis:
  auth:
    password: ""
  create: false
  master:
    persistence:
      enabled: false
  replica:
    replicaCount: 0

secretPairs:
  LWARE_IDENTITY_PASSWORD: ""
  MONGO_CONNECTION_STRING: "{{ if .Values.mongodb.create }}mongodb://root:{{ .Values.mongodb.auth.rootPassword }}@{{ .Release.Name }}-mongodb:27017/{{ .Values.configMapPairs.APP_SHORT_NAME }}?authSource=admin{{ end }}"
  REDIS_PASSWORD: "{{ .Values.redis.auth.password }}"

serviceAccount:
  annotations: {}
  automountServiceAccountToken: false
  create: false
  name: ""

serviceMonitor:
  additionalLabels: {}
  enabled: false
  interval: 30s
  metricRelabelings: []
  namespace: null
  scheme: ""
  scrapeTimeout: 10s
  targetLabels: []
  tlsConfig: {}

serviceMonitorDramatiq:
  # serviceMonitor.enabled must be true
  enabled: true
  portName: drmtq-metrics
  portNumber: 9191

alertingRule:
  # serviceMonitor.enabled must be true
  enabled: true
  downFor: 5m
  labels:
    severity: critical
  additionalRules: []

singleBinaryApp:
  affinity: {}
  args:
    - sh
    - "-c"
    - honcho start
  autoscaling:
    enabled: false
    maxReplicas: 10
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  command: []
  containerName: ""
  enabled: false
  ingress:
    annotations: {}
    className: ""
    enabled: false
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      []
      # - hosts:
      #     - chart-example.local
      #   secretName: chart-example-tls
  labels:
    licenseware.io/type: single-binary
  livenessProbe:
    failureThreshold: 3
    httpGet:
      path: "{{ .Values.configMapPairs.APP_PATH }}/swagger.json"
      port: "{{ .Values.singleBinaryApp.service.portName }}"
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  metrics:
    enabled: false
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  readinessProbe:
    failureThreshold: 3
    httpGet:
      path: "{{ .Values.configMapPairs.APP_PATH }}/swagger.json"
      port: "{{ .Values.singleBinaryApp.service.portName }}"
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 1
  resources: {}
  securityContext: {}
  service:
    containerPort: "{{ .Values.configMapPairs.PORT }}"
    enabled: true
    port: 80
    portName: http
    protocol: TCP
    type: ClusterIP
  strategy: {}
  terminationGracePeriodSeconds: ""
  tolerations: []

webApp:
  affinity: {}
  args:
    - sh
    - "-c"
    - uwsgi -M --http-socket 0.0.0.0:${PORT:-5000} -w main:app --processes ${NUM_PROCESSORS:-4} --enable-threads --threads ${NUM_THREADS:-2} --py-autoreload=1
  autoscaling:
    enabled: false
    maxReplicas: 10
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  command: []
  containerName: ""
  enabled: true
  ingress:
    annotations: {}
    className: ""
    enabled: false
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    # - hosts:
    #     - chart-example.local
    #   secretName: chart-example-tls
  labels:
    licenseware.io/type: web
  livenessProbe:
    failureThreshold: 3
    httpGet:
      path: "{{ .Values.configMapPairs.APP_PATH }}/swagger.json"
      port: "{{ .Values.webApp.service.portName }}"
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  readinessProbe:
    failureThreshold: 3
    httpGet:
      path: "{{ .Values.configMapPairs.APP_PATH }}/swagger.json"
      port: "{{ .Values.webApp.service.portName }}"
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 1
  resources: {}
  securityContext: {}
  service:
    containerPort: "{{ .Values.configMapPairs.PORT }}"
    enabled: true
    port: 80
    portName: http
    protocol: TCP
    type: ClusterIP
  strategy: {}
  terminationGracePeriodSeconds: ""
  tolerations: []

workerApp:
  affinity: {}
  args:
    - sh
    - "-c"
    - dramatiq main:App.broker -p ${NUM_BACKGROUND_WORKERS:-4}{{ with .Values.configMapPairs.QUEUE_NAME }} --queues ${QUEUE_NAME:-{{ toYaml . }}}{{ end }}
  autoscaling:
    enabled: false
    maxReplicas: 10
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  command: []
  containerName: ""
  enabled: true
  initContainers: []
  labels:
    licenseware.io/type: worker
  livenessProbe: {}
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  readinessProbe: {}
  replicaCount: 1
  resources: {}
  securityContext: {}
  service:
    enabled: true
    containerPort: "{{ .Values.serviceMonitorDramatiq.portName }}"
    port: 80
    portName: "{{ .Values.serviceMonitorDramatiq.portName }}"
    protocol: TCP
    type: ClusterIP
  strategy: {}
  terminationGracePeriodSeconds: ""
  tolerations: []

job:
  activeDeadlineSeconds: null
  affinity: {}
  args:
  command: []
  completion: null
  containerName: ""
  enabled: false
  extraContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  restartPolicy: OnFailure
  labels:
    licenseware.io/type: job
  nameOverride: ""
  nodeSelector: {}
  parallelism: 1
  podAnnotations: {}
  podSecurityContext: {}
  resources: {}
  securityContext: {}
  terminationGracePeriodSeconds: ""
  tolerations: []
