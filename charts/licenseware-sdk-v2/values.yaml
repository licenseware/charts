commonLabels:
  licenseware.io/app: "{{ .Values.configMapPairs.APP_SHORT_NAME }}"
  licenseware.io/env: "{{ .Values.configMapPairs.ENVIRONMENT }}"
  licenseware.io/owner: licenseware
  licenseware.io/tier: backend

configMapPairs:
  APP_HOST: ""
  APP_ID: ""
  APP_NAME: ""
  APP_PATH: ""
  APP_SHORT_NAME: ""
  AUTH_SERVICE_URL: ""
  ENVIRONMENT: ""
  FILE_UPLOAD_PATH: /tmp/lware
  IFMP_SERVICE_URL: ""
  LOG_LEVEL: INFO
  LWARE_IDENTITY_USER: ""
  MONGO_DATABASE_NAME: "{{ .Values.configMapPairs.APP_SHORT_NAME }}"
  PORT: "5000"
  QUEUE_NAME: ""
  REDIS_DB: "0"
  REDIS_HOST: "{{ if .Values.redis.create }}{{ .Release.Name }}-redis-master{{ end }}"
  REDIS_PORT: "6379"
  REGISTRY_SERVICE_URL: ""

extraEnv: []

extraEnvFrom: []

extraVolumeMounts: []

extraVolumes: []

fullnameOverride: ""

global:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 10
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  containerName: ""
  livenessProbe: {}
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  readinessProbe: {}
  replicaCount: 1
  resources:
    limits:
      cpu: "2"
      memory: 4Gi
    requests:
      cpu: 100m
      memory: 128Mi
  securityContext:
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    runAsGroup: 1000
    runAsNonRoot: true
    runAsUser: 1000
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  terminationGracePeriodSeconds: 30
  tolerations: []

image:
  pullPolicy: IfNotPresent
  repository: ghcr.io/licenseware/licenseware-sdk-v2
  tag: latest

imagePullSecrets: []

jupyter:
  create: false

mongo-express:
  create: false
  image:
    tag: 1.0.0-alpha
  mongodbEnableAdmin: true
  mongodbAuthDatabase: admin
  mongodbAdminUsername: root
  mongodbAdminPassword: ""
  mongodbServer: ""

mongodb:
  auth:
    rootPassword: ""
  create: false
  persistence:
    enabled: true

nameOverride: ""

persistence:
  sourceCode:
    accessModes:
      - ReadWriteOnce
    annotations: {}
    claimName: ""
    enabled: false
    mountPath: /home/licenseware/service
    nameOverride: ""
    size: 512Mi
    storageClassName: ""
  uploadFiles:
    claimName: ""
    enabled: true

redis:
  auth:
    password: ""
  create: false
  master:
    persistence:
      enabled: false
  replica:
    replicaCount: 0

secretPairs:
  LWARE_IDENTITY_PASSWORD: ""
  MONGO_CONNECTION_STRING: "{{ if .Values.mongodb.create }}mongodb://root:{{ .Values.mongodb.auth.rootPassword }}@{{ .Release.Name }}-mongodb:27017/{{ .Values.configMapPairs.APP_SHORT_NAME }}?authSource=admin{{ end }}"
  REDIS_PASSWORD: "{{ .Values.redis.auth.password }}"

serviceAccount:
  annotations: {}
  automountServiceAccountToken: false
  create: false
  name: ""

singleBinaryApp:
  affinity: {}
  args:
    - sh
    - -c
    - honcho start
  autoscaling:
    enabled: false
    maxReplicas: 10
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  command: []
  containerName: ""
  enabled: false
  ingress:
    annotations: {}
    className: ""
    enabled: false
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - hosts:
          - chart-example.local
        secretName: chart-example-tls
  labels:
    licenseware.io/type: web
  livenessProbe:
    failureThreshold: 3
    httpGet:
      path: "{{ .Values.configMapPairs.APP_PATH }}/swagger.json"
      port: "{{ .Values.webApp.service.portName }}"
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  readinessProbe:
    failureThreshold: 3
    httpGet:
      path: "{{ .Values.configMapPairs.APP_PATH }}/swagger.json"
      port: "{{ .Values.webApp.service.portName }}"
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 1
  resources: {}
  securityContext: {}
  service:
    containerPort: "{{ .Values.configMapPairs.PORT }}"
    enabled: true
    port: 80
    portName: http
    protocol: TCP
    type: ClusterIP
  strategy: {}
  terminationGracePeriodSeconds: ""
  tolerations: []

webApp:
  affinity: {}
  args:
    - sh
    - -c
    - uwsgi -M --http-socket 0.0.0.0:${PORT:-5000} -w main:app --processes ${NUM_PROCESSORS:-4} --enable-threads --threads ${NUM_THREADS:-2} --py-autoreload=1
  autoscaling:
    enabled: false
    maxReplicas: 10
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  command: []
  containerName: ""
  enabled: true
  ingress:
    annotations: {}
    className: ""
    enabled: false
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - hosts:
          - chart-example.local
        secretName: chart-example-tls
  labels:
    licenseware.io/type: web
  livenessProbe:
    failureThreshold: 3
    httpGet:
      path: "{{ .Values.configMapPairs.APP_PATH }}/swagger.json"
      port: "{{ .Values.webApp.service.portName }}"
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  readinessProbe:
    failureThreshold: 3
    httpGet:
      path: "{{ .Values.configMapPairs.APP_PATH }}/swagger.json"
      port: "{{ .Values.webApp.service.portName }}"
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 1
  resources: {}
  securityContext: {}
  service:
    containerPort: "{{ .Values.configMapPairs.PORT }}"
    enabled: true
    port: 80
    portName: http
    protocol: TCP
    type: ClusterIP
  strategy: {}
  terminationGracePeriodSeconds: ""
  tolerations: []

workerApp:
  affinity: {}
  args:
    - sh
    - -c
    - dramatiq main:App.broker -p ${NUM_BACKGROUND_WORKERS:-4}{{ with .Values.configMapPairs.QUEUE_NAME }} --queues ${QUEUE_NAME:-{{ toYaml . }}}{{ end }}
  autoscaling:
    enabled: false
    maxReplicas: 10
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  command: []
  containerName: ""
  enabled: true
  labels:
    licenseware.io/type: worker
  livenessProbe: {}
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  readinessProbe: {}
  replicaCount: 1
  resources: {}
  securityContext: {}
  strategy: {}
  terminationGracePeriodSeconds: ""
  tolerations: []
