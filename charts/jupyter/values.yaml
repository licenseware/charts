config:
  port: 8888
  token: "" # defaults to random generated alphanumeric

replicaCount: 1

image:
  repository: ghcr.io/licenseware/jupyter
  tag: ""
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: false
  annotations: {}
  name: ""
  automountServiceAccountToken: false

podAnnotations: {}

podSecurityContext:
  fsGroup: 1000

securityContext:
  # readOnlyRootFilesystem: true
  capabilities:
    drop:
    - ALL
  runAsUser: 1000
  runAsNonRoot: true
  runAsGroup: 1000

service:
  type: ClusterIP
  targetPort: "{{ .Values.config.port }}"
  port: 80
  portName: http
  protocol: TCP

livenessProbe:
  httpGet:
    path: /login
    port: "{{ .Values.service.portName }}"
  initialDelaySeconds: 5
  timeoutSeconds: 2
  periodSeconds: 10
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  httpGet:
    path: /login
    port: "{{ .Values.service.portName }}"
  initialDelaySeconds: 5
  timeoutSeconds: 2
  periodSeconds: 10
  failureThreshold: 3
  successThreshold: 1

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
